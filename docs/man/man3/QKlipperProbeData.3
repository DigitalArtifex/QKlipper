.TH "QKlipperProbeData" 3 "Version 0.2" "QKlipper" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QKlipperProbeData
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <qklipperprobedata\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQKlipperProbeData\fP (QObject *parent=nullptr)"
.br
.ti -1c
.RI "\fB~QKlipperProbeData\fP ()"
.br
.ti -1c
.RI "QString \fBname\fP () const"
.br
.ti -1c
.RI "bool \fBisManual\fP () const"
.br
.ti -1c
.RI "bool \fBlastQuery\fP () const"
.br
.ti -1c
.RI "qreal \fBzPosition\fP () const"
.br
.ti -1c
.RI "qreal \fBzPositionLower\fP () const"
.br
.ti -1c
.RI "qreal \fBzPositionUpper\fP () const"
.br
.ti -1c
.RI "void \fBsetName\fP (const QString &\fBname\fP)"
.br
.ti -1c
.RI "void \fBresetName\fP ()"
.br
.ti -1c
.RI "void \fBsetIsManual\fP (bool \fBisManual\fP)"
.br
.ti -1c
.RI "void \fBresetIsManual\fP ()"
.br
.ti -1c
.RI "void \fBsetLastQuery\fP (bool \fBlastQuery\fP)"
.br
.ti -1c
.RI "void \fBresetLastQuery\fP ()"
.br
.ti -1c
.RI "void \fBsetZPosition\fP (qreal \fBzPosition\fP)"
.br
.ti -1c
.RI "void \fBresetZPosition\fP ()"
.br
.ti -1c
.RI "void \fBsetZPositionLower\fP (qreal \fBzPositionLower\fP)"
.br
.ti -1c
.RI "void \fBresetZPositionLower\fP ()"
.br
.ti -1c
.RI "void \fBsetZPositionUpper\fP (qreal \fBzPositionUpper\fP)"
.br
.ti -1c
.RI "void \fBresetZPositionUpper\fP ()"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBQKlipperProbeData\fP &data) const"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBQKlipperProbeData\fP &data) const"
.br
.ti -1c
.RI "qreal \fBlastZResult\fP () const"
.br
.ti -1c
.RI "void \fBsetLastZResult\fP (qreal \fBlastZResult\fP)"
.br
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "QString \fBname\fP"
.br
.ti -1c
.RI "bool \fBisManual\fP"
.br
.ti -1c
.RI "bool \fBlastQuery\fP"
.br
.ti -1c
.RI "qreal \fBzPosition\fP"
.br
.ti -1c
.RI "qreal \fBzPositionLower\fP"
.br
.ti -1c
.RI "qreal \fBzPositionUpper\fP"
.br
.ti -1c
.RI "qreal \fBlastZResult\fP"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "QKlipperProbeData::QKlipperProbeData (QObject * parent = \fCnullptr\fP)\fC [explicit]\fP"

.SS "QKlipperProbeData::~QKlipperProbeData ()"

.SH "Member Function Documentation"
.PP 
.SS "bool QKlipperProbeData::isManual () const"

.SS "bool QKlipperProbeData::lastQuery () const"

.SS "qreal QKlipperProbeData::lastZResult () const"

.SS "QString QKlipperProbeData::name () const"

.SS "bool QKlipperProbeData::operator!= (const \fBQKlipperProbeData\fP & data) const\fC [inline]\fP"

.SS "bool QKlipperProbeData::operator== (const \fBQKlipperProbeData\fP & data) const\fC [inline]\fP"

.SS "void QKlipperProbeData::resetIsManual ()"

.SS "void QKlipperProbeData::resetLastQuery ()"

.SS "void QKlipperProbeData::resetName ()"

.SS "void QKlipperProbeData::resetZPosition ()"

.SS "void QKlipperProbeData::resetZPositionLower ()"

.SS "void QKlipperProbeData::resetZPositionUpper ()"

.SS "void QKlipperProbeData::setIsManual (bool isManual)"

.SS "void QKlipperProbeData::setLastQuery (bool lastQuery)"

.SS "void QKlipperProbeData::setLastZResult (qreal lastZResult)"

.SS "void QKlipperProbeData::setName (const QString & name)"

.SS "void QKlipperProbeData::setZPosition (qreal zPosition)"

.SS "void QKlipperProbeData::setZPositionLower (qreal zPositionLower)"

.SS "void QKlipperProbeData::setZPositionUpper (qreal zPositionUpper)"

.SS "qreal QKlipperProbeData::zPosition () const"

.SS "qreal QKlipperProbeData::zPositionLower () const"

.SS "qreal QKlipperProbeData::zPositionUpper () const"

.SH "Property Documentation"
.PP 
.SS "bool QKlipperProbeData::isManual\fC [read]\fP, \fC [write]\fP"

.SS "bool QKlipperProbeData::lastQuery\fC [read]\fP, \fC [write]\fP"

.SS "qreal QKlipperProbeData::lastZResult\fC [read]\fP, \fC [write]\fP"

.SS "QString QKlipperProbeData::name\fC [read]\fP, \fC [write]\fP"

.SS "qreal QKlipperProbeData::zPosition\fC [read]\fP, \fC [write]\fP"

.SS "qreal QKlipperProbeData::zPositionLower\fC [read]\fP, \fC [write]\fP"

.SS "qreal QKlipperProbeData::zPositionUpper\fC [read]\fP, \fC [write]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for QKlipper from the source code\&.
