.TH "QKlipperConsole" 3 "Version 0.2" "QKlipper" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QKlipperConsole \- \fBQKlipperConsole\fP class\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <qklipperconsole\&.h>\fP
.PP
Inherits QObject\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBConnectionState\fP { \fBIdle\fP = 0, \fBStartup\fP = 0b00000001, \fBConnecting\fP = 0b00000010, \fBConnected\fP = 0b00000100, \fBMoonrakerConnected\fP = 0b00001000, \fBKlipperConnected\fP = 0b00010000, \fBSyncronized\fP = 0b00100000, \fBError\fP = 0b10000000 }"
.br
.RI "ConnectionState enum\&. "
.in -1c
.SS "Public Slots"

.in +1c
.ti -1c
.RI "void \fBaccessLogin\fP (QString username, QString password)"
.br
.RI "Asyncronously requests user login\&. "
.ti -1c
.RI "void \fBaccessLogout\fP ()"
.br
.RI "Asyncronously logs the current user out\&. "
.ti -1c
.RI "void \fBaccessGetUser\fP ()"
.br
.RI "Asyncronously requests current user information\&. "
.ti -1c
.RI "void \fBaccessCreateUser\fP (QString username, QString password)"
.br
.RI "Asyncronously requests user creation\&. "
.ti -1c
.RI "void \fBaccessDeleteUser\fP (QString username)"
.br
.RI "Asyncronously requests user deletion\&. "
.ti -1c
.RI "void \fBaccessUsersList\fP ()"
.br
.RI "Asyncronously requests user list\&. "
.ti -1c
.RI "void \fBaccessUserPasswordReset\fP (QString password, QString newPassword)"
.br
.RI "Asyncronously requests password change for the current user\&. "
.ti -1c
.RI "void \fBclientIdentifier\fP ()"
.br
.RI "Asyncronously requests job queue items to be deleted\&. "
.ti -1c
.RI "void \fBmachineShutdown\fP (\fBQKlipperConsoleError\fP *error=nullptr)"
.br
.RI "Sends command to shutdown machine\&. "
.ti -1c
.RI "void \fBmachineReboot\fP (\fBQKlipperConsoleError\fP *error=nullptr)"
.br
.RI "Sends command to reboot machine\&. "
.ti -1c
.RI "void \fBmachineSystemInfo\fP ()"
.br
.RI "Asyncronously queries machine info\&. "
.ti -1c
.RI "bool \fBmachineServiceRestart\fP (QString service, \fBQKlipperConsoleError\fP *error=nullptr)"
.br
.RI "Sends a command to restart a klipper service\&. "
.ti -1c
.RI "bool \fBmachineServiceStop\fP (QString service, \fBQKlipperConsoleError\fP *error=nullptr)"
.br
.RI "Sends a command to stop a klipper service\&. "
.ti -1c
.RI "bool \fBmachineServiceStart\fP (QString service, \fBQKlipperConsoleError\fP *error=nullptr)"
.br
.RI "Sends a command to start a klipper service\&. "
.ti -1c
.RI "void \fBmachinePeripheralsUSB\fP ()"
.br
.RI "Asyncronously queries a list of USB devices\&. "
.ti -1c
.RI "void \fBmachinePeripheralsSerial\fP ()"
.br
.RI "Asyncronously queries a list of serial devices\&. "
.ti -1c
.RI "void \fBmachinePeripheralsVideo\fP ()"
.br
.RI "Asyncronously queries a list of video devices\&. "
.ti -1c
.RI "void \fBmachinePeripheralsCanbus\fP (qint32 canBus)"
.br
.RI "Asyncronously queries an unregistered CAN Bus\&. "
.ti -1c
.RI "void \fBmachineProcStats\fP ()"
.br
.RI "Asyncronously queries machine proc stats\&. "
.ti -1c
.RI "void \fBmachineUpdateStatus\fP ()"
.br
.RI "Asyncronously queries machine update status\&. "
.ti -1c
.RI "void \fBmachineUpdateRefresh\fP ()"
.br
.RI "Asyncronously requests a refresh of the update status\&. "
.ti -1c
.RI "bool \fBmachineUpdateFull\fP (\fBQKlipperConsoleError\fP *error=nullptr)"
.br
.RI "Sends a command to perform a full update of the system, klipper and moonraker\&. "
.ti -1c
.RI "bool \fBmachineUpdateMoonraker\fP (\fBQKlipperConsoleError\fP *error=nullptr)"
.br
.RI "Sends a command to perform an update on Moonraker\&. "
.ti -1c
.RI "bool \fBmachineUpdateKlipper\fP (\fBQKlipperConsoleError\fP *error=nullptr)"
.br
.RI "Sends a command to perform an update on Klipper\&. "
.ti -1c
.RI "bool \fBmachineUpdateClient\fP (QString client, \fBQKlipperConsoleError\fP *error=nullptr)"
.br
.RI "Sends a command to perform an update on the specified client\&. "
.ti -1c
.RI "bool \fBmachineUpdateSystem\fP (\fBQKlipperConsoleError\fP *error=nullptr)"
.br
.RI "Sends a command to perform an update on the system\&. "
.ti -1c
.RI "bool \fBmachineUpdateRecover\fP (QString name, bool hardRecover=false, \fBQKlipperConsoleError\fP *error=nullptr)"
.br
.RI "Sends a command to perform an update on the specified client\&. "
.ti -1c
.RI "bool \fBmachineUpdateRollback\fP (QString name, \fBQKlipperConsoleError\fP *error=nullptr)"
.br
.RI "Sends a command to perform an update rollback on specified client\&. "
.ti -1c
.RI "void \fBprinterInfo\fP ()"
.br
.RI "Asyncronously queries printer info\&. "
.ti -1c
.RI "void \fBprinterMCUInfo\fP ()"
.br
.RI "Asyncronously queries printer MCU info\&. "
.ti -1c
.RI "void \fBprinterObjectsList\fP ()"
.br
.RI "Asyncronously queries available objects to subscribe to\&. "
.ti -1c
.RI "void \fBprinterObjectsQuery\fP (QString &object)"
.br
.RI "Asyncronously queries a specific printer object\&. "
.ti -1c
.RI "void \fBprinterSubscribe\fP ()"
.br
.RI "Asyncronously subscribes to all available printer objects for update\&. "
.ti -1c
.RI "void \fBprinterQueryEndstops\fP ()"
.br
.RI "Asyncronously queries printer endstops\&. "
.ti -1c
.RI "bool \fBprinterPrintStart\fP (QString file, \fBQKlipperConsoleError\fP *error=nullptr)"
.br
.RI "Sends a command to start a print job\&. "
.ti -1c
.RI "bool \fBprinterPrintPause\fP (\fBQKlipperConsoleError\fP *error=nullptr)"
.br
.RI "Sends a command to pause the printer's current print job\&. "
.ti -1c
.RI "bool \fBprinterPrintResume\fP (\fBQKlipperConsoleError\fP *error=nullptr)"
.br
.RI "Sends a command to resume the printer's current print job\&. "
.ti -1c
.RI "bool \fBprinterPrintCancel\fP (\fBQKlipperConsoleError\fP *error=nullptr)"
.br
.RI "Sends a command to cancel the printer's current print job\&. "
.ti -1c
.RI "bool \fBprinterEmergencyStop\fP (\fBQKlipperConsoleError\fP *error=nullptr)"
.br
.RI "Sends an emergency stop command to the printer\&. "
.ti -1c
.RI "bool \fBprinterGcodeScript\fP (QString gcode, \fBQKlipperConsoleError\fP *error=nullptr, \fBQKlipperMessage::Origin\fP origin=\fBQKlipperMessage::System\fP)"
.br
.RI "Sends the requested gcode command and returns when it is completed\&. "
.ti -1c
.RI "bool \fBrestartKlipper\fP (\fBQKlipperConsoleError\fP *error=nullptr)"
.br
.RI "Sends a restart command to klipper and returns if it was successful or not\&. "
.ti -1c
.RI "bool \fBrestartFirmware\fP (\fBQKlipperConsoleError\fP *error=nullptr)"
.br
.RI "Sends a reset firmware command and returns if it was successful or not\&. "
.ti -1c
.RI "bool \fBserverRestart\fP (\fBQKlipperConsoleError\fP *error=nullptr)"
.br
.RI "Sends a restart command to the server and returns if it was successful or not\&. "
.ti -1c
.RI "void \fBserverInfo\fP ()"
.br
.RI "Asyncronously queries server info\&. "
.ti -1c
.RI "void \fBserverConfig\fP ()"
.br
.RI "Asyncronously queries server config\&. "
.ti -1c
.RI "void \fBserverFileRoots\fP ()"
.br
.RI "Asyncronously queries available file roots\&. "
.ti -1c
.RI "void \fBserverFilesMetadata\fP (QString fileName)"
.br
.RI "Asyncronously queries file metadata\&. "
.ti -1c
.RI "void \fBserverFilesMetadata\fP (\fBQKlipperFile\fP *file)"
.br
.RI "Asyncronously queries file metadata\&. "
.ti -1c
.RI "void \fBserverFilesList\fP (QString directory=QString('gcodes'))"
.br
.RI "Asyncronously queries list of files in specified directory\&. "
.ti -1c
.RI "void \fBserverFileDelete\fP (QString file)"
.br
.RI "Asyncronously queries file delete request\&. "
.ti -1c
.RI "void \fBserverFileDelete\fP (\fBQKlipperFile\fP *file)"
.br
.RI "Asyncronously queries file delete request\&. "
.ti -1c
.RI "void \fBserverFileMove\fP (QString source, QString destination)"
.br
.RI "Asyncronously queries file move request\&. "
.ti -1c
.RI "void \fBserverFileCopy\fP (QString source, QString destination)"
.br
.RI "Asyncronously queries file copy request\&. "
.ti -1c
.RI "QByteArray \fBserverFileDownload\fP (\fBQKlipperFile\fP *file, \fBQKlipperConsoleError\fP *error=nullptr)"
.br
.RI "Requests the raw data of the specified file\&. "
.ti -1c
.RI "bool \fBserverFileUpload\fP (QString root, QString directory, QString name, QByteArray data, \fBQKlipperConsoleError\fP *error=nullptr)"
.br
.RI "Uploads the specified data to the server\&. "
.ti -1c
.RI "void \fBserverDirectoryPost\fP (QString directory)"
.br
.RI "Asyncronously requests creation of specified directory\&. "
.ti -1c
.RI "void \fBserverDirectoryDelete\fP (QString directory)"
.br
.RI "Asyncronously requests deletion of specified directory\&. "
.ti -1c
.RI "void \fBserverTemperatureStore\fP ()"
.br
.RI "Asyncronously requests temperature store history\&. "
.ti -1c
.RI "void \fBserverGcodeStore\fP ()"
.br
.RI "Asyncronously requests gcode store history\&. "
.ti -1c
.RI "void \fBserverLogsRollover\fP ()"
.br
.RI "Asyncronously requests rollover of all logs\&. "
.ti -1c
.RI "void \fBserverLogsRollover\fP (QString &application)"
.br
.RI "Asyncronously requests rollover of logs for specified application\&. "
.ti -1c
.RI "void \fBserverWebsocketId\fP ()"
.br
.RI "Asyncronously requests websocket id\&. "
.ti -1c
.RI "void \fBserverWebcamList\fP ()"
.br
.RI "Asyncronously requests list of available webcams\&. "
.ti -1c
.RI "void \fBserverWebcamCreate\fP (\fBQKlipperWebcam\fP *webcam)"
.br
.RI "Asyncronously requests creation of webcam object\&. "
.ti -1c
.RI "void \fBserverWebcamUpdate\fP (\fBQKlipperWebcam\fP *webcam)"
.br
.RI "Asyncronously requests updating the information of specified webcam\&. "
.ti -1c
.RI "void \fBserverWebcamDelete\fP (\fBQKlipperWebcam\fP *webcam)"
.br
.RI "Asyncronously requests deletion of webcam object\&. "
.ti -1c
.RI "void \fBserverAnnouncementsList\fP (bool includeDismissed=false)"
.br
.RI "Asyncronously requests list of announcements\&. "
.ti -1c
.RI "void \fBserverAnnouncementsUpdate\fP ()"
.br
.RI "Asyncronously requests update of announcements\&. "
.ti -1c
.RI "void \fBserverAnnouncementDismiss\fP (QString entryId, qint64 waketime=0)"
.br
.RI "Asyncronously requests dismissal of specified announcement\&. "
.ti -1c
.RI "void \fBserverJobQueueStatus\fP ()"
.br
.RI "Asyncronously requests job queue status\&. "
.ti -1c
.RI "void \fBserverJobQueueStart\fP ()"
.br
.RI "Asyncronously requests job queue to start\&. "
.ti -1c
.RI "void \fBserverJobQueuePause\fP ()"
.br
.RI "Asyncronously requests job queue to pause\&. "
.ti -1c
.RI "void \fBserverJobQueueJump\fP (QString id)"
.br
.RI "Asyncronously requests job queue to jump to specified job ID\&. "
.ti -1c
.RI "void \fBserverJobQueueAdd\fP (QStringList filenames)"
.br
.RI "Asyncronously requests files to be added to the job queue\&. "
.ti -1c
.RI "void \fBserverJobQueueDelete\fP (QStringList ids)"
.br
.RI "Asyncronously requests job queue items to be deleted\&. "
.in -1c
.SS "Signals"

.in +1c
.ti -1c
.RI "void \fBconnectionStateChanged\fP ()"
.br
.ti -1c
.RI "void \fBstartupSequenceProgressChanged\fP ()"
.br
.ti -1c
.RI "void \fBstartupSequenceTextChanged\fP ()"
.br
.ti -1c
.RI "void \fBerrorMessageChanged\fP ()"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQKlipperConsole\fP (QObject *parent=nullptr)"
.br
.RI "Constructor\&. "
.ti -1c
.RI "\fB~QKlipperConsole\fP ()"
.br
.RI "Destructor\&. "
.ti -1c
.RI "void \fBconnect\fP ()"
.br
.RI "Connect to the websocket address and process startup sequence\&. "
.ti -1c
.RI "void \fBdisconnect\fP ()"
.br
.RI "Disconnect from the websocket and reset objects\&. "
.ti -1c
.RI "\fBConnectionState\fP \fBconnectionState\fP () const"
.br
.RI "Connection state of the console\&. "
.ti -1c
.RI "bool \fBhasConnectionState\fP (\fBConnectionState\fP state)"
.br
.RI "Checks the current connection state to see if it has the passed flag\&. "
.ti -1c
.RI "void \fBaddConnectionState\fP (\fBConnectionState\fP state)"
.br
.RI "Adds a flag to the current connection state\&. "
.ti -1c
.RI "void \fBremoveConnectionState\fP (\fBConnectionState\fP state)"
.br
.RI "Removes a flag from the current connection state\&. "
.ti -1c
.RI "bool \fBisConnecting\fP ()"
.br
.RI "Checks if the current state for the connecting flag\&. "
.ti -1c
.RI "bool \fBisConnected\fP ()"
.br
.RI "Checks if the current state for the connecting, MoonrakerConnected flags\&. "
.ti -1c
.RI "qreal \fBstartupSequenceProgress\fP () const"
.br
.RI "The current progress of the startup sequence\&. "
.ti -1c
.RI "QString \fBstartupSequenceText\fP () const"
.br
.RI "Current startup sequence text\&. "
.ti -1c
.RI "QString \fBerrorMessage\fP () const"
.br
.RI "Error message, if available\&. "
.ti -1c
.RI "\fBQKlipperPrinter\fP * \fBprinter\fP () const"
.br
.ti -1c
.RI "\fBQKlipperSystem\fP * \fBsystem\fP () const"
.br
.ti -1c
.RI "\fBQKlipperServer\fP * \fBserver\fP () const"
.br
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "\fBConnectionState\fP \fBconnectionState\fP"
.br
.ti -1c
.RI "qreal \fBstartupSequenceProgress\fP"
.br
.ti -1c
.RI "QString \fBstartupSequenceText\fP"
.br
.ti -1c
.RI "QString \fBerrorMessage\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
\fBQKlipperConsole\fP class\&. 

This class is responsible for the actual communication to the klipper instance via moonraker\&. It provides methods for the moonraker API for controlling and querying aspects of the klipper instance\&.
.PP
Prior to connecting, it is required to pass instance references to \fBQKlipperPrinter\fP, \fBQKlipperSystem\fP and \fBQKlipperServer\fP that have been setup and configured\&. 
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBQKlipperConsole::ConnectionState\fP"

.PP
ConnectionState enum\&. This enum provides flags for the various connection states of the console 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIIdle \fP\fP
.TP
\fB\fIStartup \fP\fP
!< Connection state is idle\&. This is the default state 
.TP
\fB\fIConnecting \fP\fP
!< Connection has been established and currently syncing 
.TP
\fB\fIConnected \fP\fP
!< Connecting to websocket address 
.TP
\fB\fIMoonrakerConnected \fP\fP
!< Connection to websocket established 
.TP
\fB\fIKlipperConnected \fP\fP
!< Connection to moonraker established 
.TP
\fB\fISyncronized \fP\fP
!< Connection to klipper verified 
.TP
\fB\fIError \fP\fP
!< Connection to websocket, moonraker and klipper established and startup completed 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "QKlipperConsole::QKlipperConsole (QObject * parent = \fCnullptr\fP)\fC [explicit]\fP"

.PP
Constructor\&. 
.PP
\fBParameters\fP
.RS 4
\fIparent\fP The parent object 
.RE
.PP

.SS "QKlipperConsole::~QKlipperConsole ()"

.PP
Destructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "void QKlipperConsole::accessCreateUser (QString username, QString password)\fC [slot]\fP"

.PP
Asyncronously requests user creation\&. 
.PP
\fBParameters\fP
.RS 4
\fIusername\fP Username to login
.br
\fIpassword\fP Password for the user 
.RE
.PP

.SS "void QKlipperConsole::accessDeleteUser (QString username)\fC [slot]\fP"

.PP
Asyncronously requests user deletion\&. 
.PP
\fBParameters\fP
.RS 4
\fIusername\fP Username to login 
.RE
.PP

.SS "void QKlipperConsole::accessGetUser ()\fC [slot]\fP"

.PP
Asyncronously requests current user information\&. 
.SS "void QKlipperConsole::accessLogin (QString username, QString password)\fC [slot]\fP"

.PP
Asyncronously requests user login\&. 
.PP
\fBParameters\fP
.RS 4
\fIusername\fP Username to login
.br
\fIpassword\fP Password for the user 
.RE
.PP

.SS "void QKlipperConsole::accessLogout ()\fC [slot]\fP"

.PP
Asyncronously logs the current user out\&. 
.SS "void QKlipperConsole::accessUserPasswordReset (QString password, QString newPassword)\fC [slot]\fP"

.PP
Asyncronously requests password change for the current user\&. 
.PP
\fBParameters\fP
.RS 4
\fIpassword\fP Password for the user
.br
\fInewPassword\fP New password for the user 
.RE
.PP

.SS "void QKlipperConsole::accessUsersList ()\fC [slot]\fP"

.PP
Asyncronously requests user list\&. 
.SS "void QKlipperConsole::addConnectionState (\fBConnectionState\fP state)"

.PP
Adds a flag to the current connection state\&. 
.SS "void QKlipperConsole::clientIdentifier ()\fC [slot]\fP"

.PP
Asyncronously requests job queue items to be deleted\&. 
.SS "void QKlipperConsole::connect ()"

.PP
Connect to the websocket address and process startup sequence\&. 
.SS "\fBQKlipperConsole::ConnectionState\fP QKlipperConsole::connectionState () const"

.PP
Connection state of the console\&. 
.PP
\fBReturns\fP
.RS 4
The current connection state value 
.RE
.PP

.SS "void QKlipperConsole::connectionStateChanged ()\fC [signal]\fP"

.SS "void QKlipperConsole::disconnect ()"

.PP
Disconnect from the websocket and reset objects\&. 
.SS "QString QKlipperConsole::errorMessage () const"

.PP
Error message, if available\&. 
.PP
\fBReturns\fP
.RS 4
Error message, if available 
.RE
.PP

.SS "void QKlipperConsole::errorMessageChanged ()\fC [signal]\fP"

.SS "bool QKlipperConsole::hasConnectionState (\fBConnectionState\fP state)"

.PP
Checks the current connection state to see if it has the passed flag\&. 
.PP
\fBParameters\fP
.RS 4
\fIstate\fP The connection flag to check for
.RE
.PP
\fBReturns\fP
.RS 4
True is the current connection state contains the state flag 
.RE
.PP

.SS "bool QKlipperConsole::isConnected ()"

.PP
Checks if the current state for the connecting, MoonrakerConnected flags\&. 
.PP
\fBReturns\fP
.RS 4
True if the connection state contains the connecting flag 
.RE
.PP

.SS "bool QKlipperConsole::isConnecting ()"

.PP
Checks if the current state for the connecting flag\&. 
.PP
\fBReturns\fP
.RS 4
True if the connection state contains the connecting flag 
.RE
.PP

.SS "void QKlipperConsole::machinePeripheralsCanbus (qint32 canBus)\fC [slot]\fP"

.PP
Asyncronously queries an unregistered CAN Bus\&. 
.PP
\fBParameters\fP
.RS 4
\fIcanBus\fP Index of the interface 
.RE
.PP

.SS "void QKlipperConsole::machinePeripheralsSerial ()\fC [slot]\fP"

.PP
Asyncronously queries a list of serial devices\&. 
.SS "void QKlipperConsole::machinePeripheralsUSB ()\fC [slot]\fP"

.PP
Asyncronously queries a list of USB devices\&. 
.SS "void QKlipperConsole::machinePeripheralsVideo ()\fC [slot]\fP"

.PP
Asyncronously queries a list of video devices\&. 
.SS "void QKlipperConsole::machineProcStats ()\fC [slot]\fP"

.PP
Asyncronously queries machine proc stats\&. 
.SS "void QKlipperConsole::machineReboot (\fBQKlipperConsoleError\fP * error = \fCnullptr\fP)\fC [slot]\fP"

.PP
Sends command to reboot machine\&. Server will disconnect 
.SS "bool QKlipperConsole::machineServiceRestart (QString service, \fBQKlipperConsoleError\fP * error = \fCnullptr\fP)\fC [slot]\fP"

.PP
Sends a command to restart a klipper service\&. This is a blocking method
.PP
\fBParameters\fP
.RS 4
\fIservice\fP The name of the service
.br
\fIerror\fP Optional reference to the \fBQKlipperConsoleError\fP object 
.RE
.PP

.SS "bool QKlipperConsole::machineServiceStart (QString service, \fBQKlipperConsoleError\fP * error = \fCnullptr\fP)\fC [slot]\fP"

.PP
Sends a command to start a klipper service\&. This is a blocking method
.PP
\fBParameters\fP
.RS 4
\fIservice\fP The name of the service
.br
\fIerror\fP Optional reference to the \fBQKlipperConsoleError\fP object 
.RE
.PP

.SS "bool QKlipperConsole::machineServiceStop (QString service, \fBQKlipperConsoleError\fP * error = \fCnullptr\fP)\fC [slot]\fP"

.PP
Sends a command to stop a klipper service\&. This is a blocking method
.PP
\fBParameters\fP
.RS 4
\fIservice\fP The name of the service
.br
\fIerror\fP Optional reference to the \fBQKlipperConsoleError\fP object 
.RE
.PP

.SS "void QKlipperConsole::machineShutdown (\fBQKlipperConsoleError\fP * error = \fCnullptr\fP)\fC [slot]\fP"

.PP
Sends command to shutdown machine\&. Server will disconnect 
.SS "void QKlipperConsole::machineSystemInfo ()\fC [slot]\fP"

.PP
Asyncronously queries machine info\&. 
.SS "bool QKlipperConsole::machineUpdateClient (QString client, \fBQKlipperConsoleError\fP * error = \fCnullptr\fP)\fC [slot]\fP"

.PP
Sends a command to perform an update on the specified client\&. This is a blocking method
.PP
\fBParameters\fP
.RS 4
\fIclient\fP Name of the client to update
.br
\fIerror\fP Optional reference to the \fBQKlipperConsoleError\fP object 
.RE
.PP

.SS "bool QKlipperConsole::machineUpdateFull (\fBQKlipperConsoleError\fP * error = \fCnullptr\fP)\fC [slot]\fP"

.PP
Sends a command to perform a full update of the system, klipper and moonraker\&. This is a blocking method
.PP
\fBParameters\fP
.RS 4
\fIerror\fP Optional reference to the \fBQKlipperConsoleError\fP object 
.RE
.PP

.SS "bool QKlipperConsole::machineUpdateKlipper (\fBQKlipperConsoleError\fP * error = \fCnullptr\fP)\fC [slot]\fP"

.PP
Sends a command to perform an update on Klipper\&. This is a blocking method
.PP
\fBParameters\fP
.RS 4
\fIerror\fP Optional reference to the \fBQKlipperConsoleError\fP object 
.RE
.PP

.SS "bool QKlipperConsole::machineUpdateMoonraker (\fBQKlipperConsoleError\fP * error = \fCnullptr\fP)\fC [slot]\fP"

.PP
Sends a command to perform an update on Moonraker\&. This is a blocking method
.PP
\fBParameters\fP
.RS 4
\fIerror\fP Optional reference to the \fBQKlipperConsoleError\fP object 
.RE
.PP

.SS "bool QKlipperConsole::machineUpdateRecover (QString name, bool hardRecover = \fCfalse\fP, \fBQKlipperConsoleError\fP * error = \fCnullptr\fP)\fC [slot]\fP"

.PP
Sends a command to perform an update on the specified client\&. This is a blocking method
.PP
\fBParameters\fP
.RS 4
\fIclient\fP Name of the client to recover
.br
\fIhardRecover\fP Performs a hard reset (default is false)
.br
\fIerror\fP Optional reference to the \fBQKlipperConsoleError\fP object 
.RE
.PP

.SS "void QKlipperConsole::machineUpdateRefresh ()\fC [slot]\fP"

.PP
Asyncronously requests a refresh of the update status\&. 
.SS "bool QKlipperConsole::machineUpdateRollback (QString name, \fBQKlipperConsoleError\fP * error = \fCnullptr\fP)\fC [slot]\fP"

.PP
Sends a command to perform an update rollback on specified client\&. This is a blocking method
.PP
\fBParameters\fP
.RS 4
\fIname\fP Name of the client to rollback
.br
\fIerror\fP Optional reference to the \fBQKlipperConsoleError\fP object 
.RE
.PP

.SS "void QKlipperConsole::machineUpdateStatus ()\fC [slot]\fP"

.PP
Asyncronously queries machine update status\&. 
.SS "bool QKlipperConsole::machineUpdateSystem (\fBQKlipperConsoleError\fP * error = \fCnullptr\fP)\fC [slot]\fP"

.PP
Sends a command to perform an update on the system\&. This is a blocking method
.PP
\fBParameters\fP
.RS 4
\fIerror\fP Optional reference to the \fBQKlipperConsoleError\fP object 
.RE
.PP

.SS "\fBQKlipperPrinter\fP * QKlipperConsole::printer () const"

.SS "bool QKlipperConsole::printerEmergencyStop (\fBQKlipperConsoleError\fP * error = \fCnullptr\fP)\fC [slot]\fP"

.PP
Sends an emergency stop command to the printer\&. This is a blocking method
.PP
\fBParameters\fP
.RS 4
\fIgcode\fP The gcode script to run
.br
\fIerror\fP Optional reference to the \fBQKlipperConsoleError\fP object 
.RE
.PP

.SS "bool QKlipperConsole::printerGcodeScript (QString gcode, \fBQKlipperConsoleError\fP * error = \fCnullptr\fP, \fBQKlipperMessage::Origin\fP origin = \fC\fBQKlipperMessage::System\fP\fP)\fC [slot]\fP"

.PP
Sends the requested gcode command and returns when it is completed\&. This is a blocking method
.PP
\fBParameters\fP
.RS 4
\fIgcode\fP The gcode script to run
.br
\fIerror\fP Optional reference to the \fBQKlipperConsoleError\fP object
.br
\fIorigin\fP Optional declaration of source\&. If the origin is set to anything other than 'User' the message will automatically be deleted 
.RE
.PP

.SS "void QKlipperConsole::printerInfo ()\fC [slot]\fP"

.PP
Asyncronously queries printer info\&. 
.SS "void QKlipperConsole::printerMCUInfo ()\fC [slot]\fP"

.PP
Asyncronously queries printer MCU info\&. 
.SS "void QKlipperConsole::printerObjectsList ()\fC [slot]\fP"

.PP
Asyncronously queries available objects to subscribe to\&. Must be called during startup sequence 
.SS "void QKlipperConsole::printerObjectsQuery (QString & object)\fC [slot]\fP"

.PP
Asyncronously queries a specific printer object\&. 
.SS "bool QKlipperConsole::printerPrintCancel (\fBQKlipperConsoleError\fP * error = \fCnullptr\fP)\fC [slot]\fP"

.PP
Sends a command to cancel the printer's current print job\&. This is a blocking method
.PP
\fBParameters\fP
.RS 4
\fIgcode\fP The gcode script to run
.br
\fIerror\fP Optional reference to the \fBQKlipperConsoleError\fP object 
.RE
.PP

.SS "bool QKlipperConsole::printerPrintPause (\fBQKlipperConsoleError\fP * error = \fCnullptr\fP)\fC [slot]\fP"

.PP
Sends a command to pause the printer's current print job\&. This is a blocking method
.PP
\fBParameters\fP
.RS 4
\fIgcode\fP The gcode script to run
.br
\fIerror\fP Optional reference to the \fBQKlipperConsoleError\fP object 
.RE
.PP

.SS "bool QKlipperConsole::printerPrintResume (\fBQKlipperConsoleError\fP * error = \fCnullptr\fP)\fC [slot]\fP"

.PP
Sends a command to resume the printer's current print job\&. This is a blocking method
.PP
\fBParameters\fP
.RS 4
\fIgcode\fP The gcode script to run
.br
\fIerror\fP Optional reference to the \fBQKlipperConsoleError\fP object 
.RE
.PP

.SS "bool QKlipperConsole::printerPrintStart (QString file, \fBQKlipperConsoleError\fP * error = \fCnullptr\fP)\fC [slot]\fP"

.PP
Sends a command to start a print job\&. This is a blocking method
.PP
\fBParameters\fP
.RS 4
\fIgcode\fP The gcode script to run
.br
\fIerror\fP Optional reference to the \fBQKlipperConsoleError\fP object 
.RE
.PP

.SS "void QKlipperConsole::printerQueryEndstops ()\fC [slot]\fP"

.PP
Asyncronously queries printer endstops\&. 
.SS "void QKlipperConsole::printerSubscribe ()\fC [slot]\fP"

.PP
Asyncronously subscribes to all available printer objects for update\&. Must be called during startup sequence, after printer\&.objects\&.list 
.SS "void QKlipperConsole::removeConnectionState (\fBConnectionState\fP state)"

.PP
Removes a flag from the current connection state\&. 
.SS "bool QKlipperConsole::restartFirmware (\fBQKlipperConsoleError\fP * error = \fCnullptr\fP)\fC [slot]\fP"

.PP
Sends a reset firmware command and returns if it was successful or not\&. This is a blocking method
.PP
\fBParameters\fP
.RS 4
\fIerror\fP Optional reference to the \fBQKlipperConsoleError\fP object 
.RE
.PP

.SS "bool QKlipperConsole::restartKlipper (\fBQKlipperConsoleError\fP * error = \fCnullptr\fP)\fC [slot]\fP"

.PP
Sends a restart command to klipper and returns if it was successful or not\&. This is a blocking method
.PP
\fBParameters\fP
.RS 4
\fIerror\fP Optional reference to the \fBQKlipperConsoleError\fP object 
.RE
.PP

.SS "\fBQKlipperServer\fP * QKlipperConsole::server () const"

.SS "void QKlipperConsole::serverAnnouncementDismiss (QString entryId, qint64 waketime = \fC0\fP)\fC [slot]\fP"

.PP
Asyncronously requests dismissal of specified announcement\&. 
.PP
\fBParameters\fP
.RS 4
\fIentryId\fP UID of the entry
.br
\fIwaketime\fP Time to wait before resetting the dismissed state\&. (0 means it will not reset) 
.RE
.PP

.SS "void QKlipperConsole::serverAnnouncementsList (bool includeDismissed = \fCfalse\fP)\fC [slot]\fP"

.PP
Asyncronously requests list of announcements\&. 
.PP
\fBParameters\fP
.RS 4
\fIincludeDismissed\fP Optional parameter to include dismissed announcements 
.RE
.PP

.SS "void QKlipperConsole::serverAnnouncementsUpdate ()\fC [slot]\fP"

.PP
Asyncronously requests update of announcements\&. 
.SS "void QKlipperConsole::serverConfig ()\fC [slot]\fP"

.PP
Asyncronously queries server config\&. 
.SS "void QKlipperConsole::serverDirectoryDelete (QString directory)\fC [slot]\fP"

.PP
Asyncronously requests deletion of specified directory\&. 
.PP
\fBParameters\fP
.RS 4
\fIsource\fP URI of the file to copy
.br
\fIdestination\fP URI of the new file location 
.RE
.PP

.SS "void QKlipperConsole::serverDirectoryPost (QString directory)\fC [slot]\fP"

.PP
Asyncronously requests creation of specified directory\&. 
.PP
\fBParameters\fP
.RS 4
\fIsource\fP URI of the file to copy
.br
\fIdestination\fP URI of the new file location 
.RE
.PP

.SS "void QKlipperConsole::serverFileCopy (QString source, QString destination)\fC [slot]\fP"

.PP
Asyncronously queries file copy request\&. 
.PP
\fBParameters\fP
.RS 4
\fIsource\fP URI of the file to copy
.br
\fIdestination\fP URI of the new file location 
.RE
.PP

.SS "void QKlipperConsole::serverFileDelete (\fBQKlipperFile\fP * file)\fC [slot]\fP"

.PP
Asyncronously queries file delete request\&. 
.PP
\fBParameters\fP
.RS 4
\fIfile\fP KlipperFile object of the file to be deleted 
.RE
.PP

.SS "void QKlipperConsole::serverFileDelete (QString file)\fC [slot]\fP"

.PP
Asyncronously queries file delete request\&. 
.PP
\fBParameters\fP
.RS 4
\fIfile\fP URI of the file without root 
.RE
.PP

.SS "QByteArray QKlipperConsole::serverFileDownload (\fBQKlipperFile\fP * file, \fBQKlipperConsoleError\fP * error = \fCnullptr\fP)\fC [slot]\fP"

.PP
Requests the raw data of the specified file\&. This is a blocking method
.PP
\fBParameters\fP
.RS 4
\fIfile\fP \fBQKlipperFile\fP object of the file to download
.br
\fIerror\fP Optional reference to the \fBQKlipperConsoleError\fP object
.RE
.PP
\fBReturns\fP
.RS 4
QByteArray of the file contents 
.RE
.PP

.SS "void QKlipperConsole::serverFileMove (QString source, QString destination)\fC [slot]\fP"

.PP
Asyncronously queries file move request\&. 
.PP
\fBParameters\fP
.RS 4
\fIsource\fP URI of the file to move
.br
\fIdestination\fP URI of the new file location 
.RE
.PP

.SS "void QKlipperConsole::serverFileRoots ()\fC [slot]\fP"

.PP
Asyncronously queries available file roots\&. 
.SS "void QKlipperConsole::serverFilesList (QString directory = \fCQString('gcodes')\fP)\fC [slot]\fP"

.PP
Asyncronously queries list of files in specified directory\&. 
.PP
\fBParameters\fP
.RS 4
\fIfileName\fP URI of the file without root 
.RE
.PP

.SS "void QKlipperConsole::serverFilesMetadata (\fBQKlipperFile\fP * file)\fC [slot]\fP"

.PP
Asyncronously queries file metadata\&. 
.PP
\fBParameters\fP
.RS 4
\fIfile\fP KlipperFile object 
.RE
.PP

.SS "void QKlipperConsole::serverFilesMetadata (QString fileName)\fC [slot]\fP"

.PP
Asyncronously queries file metadata\&. 
.PP
\fBParameters\fP
.RS 4
\fIfileName\fP URI of the file without root 
.RE
.PP

.SS "bool QKlipperConsole::serverFileUpload (QString root, QString directory, QString name, QByteArray data, \fBQKlipperConsoleError\fP * error = \fCnullptr\fP)\fC [slot]\fP"

.PP
Uploads the specified data to the server\&. This is a blocking method
.PP
\fBParameters\fP
.RS 4
\fIroot\fP Root directory (configs, gcodes etc)
.br
\fIdirectory\fP Path to upload the file to\&. Server will attempt to create the path if it doesn't exist
.br
\fIname\fP Name of the newly created file
.br
\fIdata\fP The data to be uploaded
.br
\fIerror\fP Optional reference to the \fBQKlipperConsoleError\fP object 
.RE
.PP

.SS "void QKlipperConsole::serverGcodeStore ()\fC [slot]\fP"

.PP
Asyncronously requests gcode store history\&. 
.SS "void QKlipperConsole::serverInfo ()\fC [slot]\fP"

.PP
Asyncronously queries server info\&. 
.SS "void QKlipperConsole::serverJobQueueAdd (QStringList filenames)\fC [slot]\fP"

.PP
Asyncronously requests files to be added to the job queue\&. 
.PP
\fBParameters\fP
.RS 4
\fIfilenames\fP List of files uris (without root) to add to the job queue 
.RE
.PP

.SS "void QKlipperConsole::serverJobQueueDelete (QStringList ids)\fC [slot]\fP"

.PP
Asyncronously requests job queue items to be deleted\&. 
.PP
\fBParameters\fP
.RS 4
\fIids\fP List of UIDs to remove from the queue 
.RE
.PP

.SS "void QKlipperConsole::serverJobQueueJump (QString id)\fC [slot]\fP"

.PP
Asyncronously requests job queue to jump to specified job ID\&. 
.PP
\fBParameters\fP
.RS 4
\fIid\fP UID of the job to jump to the front 
.RE
.PP

.SS "void QKlipperConsole::serverJobQueuePause ()\fC [slot]\fP"

.PP
Asyncronously requests job queue to pause\&. 
.SS "void QKlipperConsole::serverJobQueueStart ()\fC [slot]\fP"

.PP
Asyncronously requests job queue to start\&. 
.SS "void QKlipperConsole::serverJobQueueStatus ()\fC [slot]\fP"

.PP
Asyncronously requests job queue status\&. 
.SS "void QKlipperConsole::serverLogsRollover ()\fC [slot]\fP"

.PP
Asyncronously requests rollover of all logs\&. 
.SS "void QKlipperConsole::serverLogsRollover (QString & application)\fC [slot]\fP"

.PP
Asyncronously requests rollover of logs for specified application\&. 
.PP
\fBParameters\fP
.RS 4
\fIapplication\fP Name of the application 
.RE
.PP

.SS "bool QKlipperConsole::serverRestart (\fBQKlipperConsoleError\fP * error = \fCnullptr\fP)\fC [slot]\fP"

.PP
Sends a restart command to the server and returns if it was successful or not\&. This is a blocking method
.PP
\fBParameters\fP
.RS 4
\fIerror\fP Optional reference to the \fBQKlipperConsoleError\fP object 
.RE
.PP

.SS "void QKlipperConsole::serverTemperatureStore ()\fC [slot]\fP"

.PP
Asyncronously requests temperature store history\&. 
.SS "void QKlipperConsole::serverWebcamCreate (\fBQKlipperWebcam\fP * webcam)\fC [slot]\fP"

.PP
Asyncronously requests creation of webcam object\&. 
.PP
\fBParameters\fP
.RS 4
\fIwebcam\fP \fBQKlipperWebcam\fP object 
.RE
.PP

.SS "void QKlipperConsole::serverWebcamDelete (\fBQKlipperWebcam\fP * webcam)\fC [slot]\fP"

.PP
Asyncronously requests deletion of webcam object\&. 
.PP
\fBParameters\fP
.RS 4
\fIwebcam\fP \fBQKlipperWebcam\fP object 
.RE
.PP

.SS "void QKlipperConsole::serverWebcamList ()\fC [slot]\fP"

.PP
Asyncronously requests list of available webcams\&. 
.SS "void QKlipperConsole::serverWebcamUpdate (\fBQKlipperWebcam\fP * webcam)\fC [slot]\fP"

.PP
Asyncronously requests updating the information of specified webcam\&. 
.PP
\fBParameters\fP
.RS 4
\fIwebcam\fP \fBQKlipperWebcam\fP object 
.RE
.PP

.SS "void QKlipperConsole::serverWebsocketId ()\fC [slot]\fP"

.PP
Asyncronously requests websocket id\&. 
.SS "qreal QKlipperConsole::startupSequenceProgress () const"

.PP
The current progress of the startup sequence\&. 
.PP
\fBReturns\fP
.RS 4
The statup progress (0-100) 
.RE
.PP

.SS "void QKlipperConsole::startupSequenceProgressChanged ()\fC [signal]\fP"

.SS "QString QKlipperConsole::startupSequenceText () const"

.PP
Current startup sequence text\&. 
.PP
\fBReturns\fP
.RS 4
Current startup sequence text 
.RE
.PP

.SS "void QKlipperConsole::startupSequenceTextChanged ()\fC [signal]\fP"

.SS "\fBQKlipperSystem\fP * QKlipperConsole::system () const"

.SH "Property Documentation"
.PP 
.SS "\fBConnectionState\fP QKlipperConsole::connectionState\fC [read]\fP, \fC [write]\fP"

.SS "QString QKlipperConsole::errorMessage\fC [read]\fP, \fC [write]\fP"

.SS "qreal QKlipperConsole::startupSequenceProgress\fC [read]\fP, \fC [write]\fP"

.SS "QString QKlipperConsole::startupSequenceText\fC [read]\fP, \fC [write]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for QKlipper from the source code\&.
