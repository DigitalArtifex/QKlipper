{
    "klipper_commands": {
        "adxl345": [
            {
                "command": "ACCELEROMETER_MEASURE",
                "parameters": [
                    "CHIP",
                    "NAME"
                ],
                "help": "Starts accelerometer measurements at the requested number of samples per second. If CHIP is not specified it defaults to 'adxl345'. The command works in a start-stop mode: when executed for the first time, it starts the measurements, next execution stops them. The results of measurements are written to a file named /tmp/adxl345-<chip>-<name>.csv where <chip> is the name of the accelerometer chip (my_chip_name from [adxl345 my_chip_name]) and <name> is the optional NAME parameter. If NAME is not specified it defaults to the current time in 'YYYYMMDD_HHMMSS' format. If the accelerometer does not have a name in its config section (simply [adxl345]) then <chip> part of the name is not generated."
            },
            {
                "command": "ACCELEROMETER_QUERY",
                "parameters": [
                ],
                "help": "Queries accelerometer for the current value. If CHIP is not specified it defaults to 'adxl345'. If RATE is not specified, the default value is used. This command is useful to test the connection to the ADXL345 accelerometer: one of the returned values should be a free-fall acceleration (+/- some noise of the chip)"
            },
            {
                "command": "ANGLE_CALIBRATE",
                "parameters": [
                    "CHIP"
                ],
                "help": "Perform angle calibration on the given sensor (there must be an [angle chip_name] config section that has specified a stepper parameter). IMPORTANT - this tool will command the stepper motor to move without checking the normal kinematic boundary limits. Ideally the motor should be disconnected from any printer carriage before performing calibration. If the stepper can not be disconnected from the printer, make sure the carriage is near the center of its rail before starting calibration. (The stepper motor may move forwards or backwards two full rotations during this test.) After completing this test use the SAVE_CONFIG command to save the calibration data to the config file. In order to use this tool the Python 'numpy' package must be installed (see the measuring resonance document for more information)."
            },
            {
                "command": "ACCELEROMETER_DEBUG_READ",
                "parameters": [
                    "CHIP",
                    "REG"
                ],
                "help": "ACCELEROMETER_DEBUG_READ [CHIP=<config_name>] REG=<register>: queries ADXL345 register 'register' (e.g. 44 or 0x2C). Can be useful for debugging purposes"
            },
            {
                "command": "ACCELEROMETER_DEBUG_WRITE",
                "parameters": [
                    "CHIP",
                    "REG",
                    "VALUE"
                ],
                "help": "Writes raw \"value\" into a register \"register\". Both \"value\" and \"register\" can be a decimal or a hexadecimal integer. Use with care, and refer to ADXL345 data sheet for the reference."
            },
            {
                "command": "ANGLE_CALIBRATE",
                "parameters": [
                    "CHIP"
                ],
                "help": "Perform angle calibration on the given sensor (there must be an [angle chip_name] config section that has specified a stepper parameter). IMPORTANT - this tool will command the stepper motor to move without checking the normal kinematic boundary limits. Ideally the motor should be disconnected from any printer carriage before performing calibration. If the stepper can not be disconnected from the printer, make sure the carriage is near the center of its rail before starting calibration. (The stepper motor may move forwards or backwards two full rotations during this test.) After completing this test use the SAVE_CONFIG command to save the calibration data to the config file. In order to use this tool the Python \"numpy\" package must be installed (see the measuring resonance document for more information)."
            },
            {
                "command": "ANGLE_DEBUG_READ",
                "parameters": [
                    "CHIP",
                    "REG"
                ],
                "help": "Queries sensor register \"register\" (e.g. 44 or 0x2C). Can be useful for debugging purposes. This is only available for tle5012b chips."
            },
            {
                "command": "ANGLE_DEBUG_WRITE",
                "parameters": [
                    "CHIP",
                    "REG",
                    "VALUE"
                ],
                "help": "Writes raw \"value\" into register \"register\". Both \"value\" and \"register\" can be a decimal or a hexadecimal integer. Use with care, and refer to sensor data sheet for the reference. This is only available for tle5012b chips."
            }
        ],
        "axis_twist_compensation": [
            {
                "command": "AXIS_TWIST_COMPENSATION_CALIBRATE",
                "parameters": [
                    "SAMPLE_COUNT"
                ],
                "help": "Initiates the X twist calibration wizard. SAMPLE_COUNT specifies the number of points along the X axis to calibrate at and defaults to 3."
            }
        ],
        "bed_mesh": [
            {
                "command": "BED_MESH_CALIBRATE",
                "parameters": [
                    "PROFILE",
                    "METHOD",
                    "ADAPTIVE",
                    "ADAPTIVE_MARGIN"
                ],
                "help": "This command probes the bed using generated points specified by the parameters in the config. After probing, a mesh is generated and z-movement is adjusted according to the mesh. The mesh will be saved into a profile specified by the PROFILE parameter, or default if unspecified. See the PROBE command for details on the optional probe parameters. If METHOD=manual is specified then the manual probing tool is activated - see the MANUAL_PROBE command above for details on the additional commands available while this tool is active. The optional HORIZONTAL_MOVE_Z value overrides the horizontal_move_z option specified in the config file. If ADAPTIVE=1 is specified then the objects defined by the Gcode file being printed will be used to define the probed area. The optional ADAPTIVE_MARGIN value overrides the adaptive_margin option specified in the config file."
            },
            {
                "command": "BED_MESH_OUTPUT",
                "parameters": [
                    "PGP"
                ],
                "help": "This command outputs the current probed z values and current mesh values to the terminal. If PGP=1 is specified the X, Y coordinates generated by bed_mesh, along with their associated indices, will be output to the terminal"
            },
            {
                "command": "BED_MESH_MAP",
                "parameters": [],
                "help": "Like to BED_MESH_OUTPUT, this command prints the current state of the mesh to the terminal. Instead of printing the values in a human readable format, the state is serialized in json format. This allows octoprint plugins to easily capture the data and generate height maps approximating the bed's surface."
            },
            {
                "command": "BED_MESH_CLEAR",
                "parameters": [],
                "help": "This command clears the mesh and removes all z adjustment. It is recommended to put this in your end-gcode"
            },
            {
                "command": "BED_MESH_PROFILE",
                "parameters": [],
                "help": "This command provides profile management for mesh state. LOAD will restore the mesh state from the profile matching the supplied name. SAVE will save the current mesh state to a profile matching the supplied name. Remove will delete the profile matching the supplied name from persistent memory. Note that after SAVE or REMOVE operations have been run the SAVE_CONFIG gcode must be run to make the changes to persistent memory permanent"
            },
            {
                "command": "BED_MESH_OFFSET",
                "parameters": [
                    "X",
                    "Y",
                    "ZFADE"
                ],
                "help": "Applies X, Y, and/or ZFADE offsets to the mesh lookup. This is useful for printers with independent extruders, as an offset is necessary to produce correct Z adjustment after a tool change. Note that a ZFADE offset does not apply additional z-adjustment directly, it is used to correct the fade calculation when a gcode offset has been applied to the Z axis"
            }
        ],
        "bed_screws": [
            {
                "command": "BED_SCREWS_ADJUST",
                "parameters": [],
                "help": "This command will invoke the bed screws adjustment tool. It will command the nozzle to different locations (as defined in the config file) and allow one to make adjustments to the bed screws so that the bed is a constant distance from the nozzle."
            }
        ],
        "bed_tilt": [
            {
                "command": "BED_TILT_CALIBRATE",
                "parameters": [
                    "METHOD"
                ],
                "help": "This command will probe the points specified in the config and then recommend updated x and y tilt adjustments. See the PROBE command for details on the optional probe parameters. If METHOD=manual is specified then the manual probing tool is activated - see the MANUAL_PROBE command above for details on the additional commands available while this tool is active. The optional HORIZONTAL_MOVE_Z value overrides the horizontal_move_z option specified in the config file."
            }
        ],
        "bltouch": [
            {
                "command": "BLTOUCH_DEBUG",
                "parameters": [
                    "COMMAND"
                ],
                "help": "This sends a command to the BLTouch. It may be useful for debugging. Available commands are: pin_down, touch_mode, pin_up, self_test, reset. A BL-Touch V3.0 or V3.1 may also support set_5V_output_mode, set_OD_output_mode, output_mode_store commands"
            },
            {
                "command": "BLTOUCH_STORE",
                "parameters": [
                    "MODE"
                ],
                "help": "This stores an output mode in the EEPROM of a BLTouch V3.1 Available output_modes are: 5V, OD"
            }
        ],
        "configfile": [
            {
                "command": "SAVE_CONFIG",
                "parameters": [],
                "help": "This command will overwrite the main printer config file and restart the host software. This command is used in conjunction with other calibration commands to store the results of calibration tests"
            }
        ],
        "delayed_gcode": [
            {
                "command": "UPDATE_DELAYED_GCODE",
                "parameters": [
                    "ID",
                    "DURATION"
                ],
                "help": "Updates the delay duration for the identified [delayed_gcode] and starts the timer for gcode execution. A value of 0 will cancel a pending delayed gcode from executing"
            }
        ],
        "delta_calibrate": [
            {
                "command": "DELTA_CALIBRATE",
                "parameters": [
                    "METHOD"
                ],
                "help": "This command is used during enhanced delta calibration. See Delta Calibrate for details."
            },
            {
                "command": "DELTA_ANALYZE",
                "parameters": [
                    "METHOD"
                ],
                "help": "This command will probe seven points on the bed and recommend updated endstop positions, tower angles, and radius. See the PROBE command for details on the optional probe parameters. If METHOD=manual is specified then the manual probing tool is activated - see the MANUAL_PROBE command above for details on the additional commands available while this tool is active. The optional HORIZONTAL_MOVE_Z value overrides the horizontal_move_z option specified in the config file"
            }
        ],
        "display": [
            {
                "command": "SET_DISPLAY_GROUP",
                "parameters": [
                    "GROUP"
                ],
                "help": "Set the active display group of an lcd display. This allows to define multiple display data groups in the config, e.g. [display_data <group> <elementname>] and switch between them using this extended gcode command. If DISPLAY is not specified it defaults to \"display\" (the primary display)."
            }
        ],
        "display_status": [
            {
                "command": "SET_DISPLAY_TEXT",
                "parameters": [
                    "MSG"
                ],
                "help": "Performs the equivalent of M117, setting the supplied MSG as the current display message. If MSG is omitted the display will be cleared."
            }
        ],
        "dual_carriage": [
            {
                "command": "SET_DUAL_CARRIAGE",
                "parameters": [
                    "CARRIAGE"
                ],
                "help": "This command will change the mode of the specified carriage. If no MODE is provided it defaults to PRIMARY. Setting the mode to PRIMARY deactivates the other carriage and makes the specified carriage execute subsequent G-Code commands as-is. COPY and MIRROR modes are supported only for CARRIAGE=1. When set to either of these modes, carriage 1 will then track the subsequent moves of the carriage 0 and either copy relative movements of it (in COPY mode) or execute them in the opposite (mirror) direction (in MIRROR mode)."
            },
            {
                "command": "SAVE_DUAL_CARRIAGE_STATE",
                "parameters": [],
                "help": "Save the current positions of the dual carriages and their modes. Saving and restoring DUAL_CARRIAGE state can be useful in scripts and macros, as well as in homing routine overrides. If NAME is provided it allows one to name the saved state to the given string. If NAME is not provided it defaults to \"default\"."
            },
            {
                "command": "RESTORE_DUAL_CARRIAGE_STATE",
                "parameters": [],
                "help": "Restore the previously saved positions of the dual carriages and their modes, unless \"MOVE=0\" is specified, in which case only the saved modes will be restored, but not the positions of the carriages. If positions are being restored and \"MOVE_SPEED\" is specified, then the toolhead moves will be performed with the given speed (in mm/s); otherwise the toolhead move will use the rail homing speed. Note that the carriages restore their positions only over their own axis, which may be necessary to correctly restore COPY and MIRROR mode of the dual carraige."
            }
        ],
        "endstop_phase": [
            {
                "command": "ENDSTOP_PHASE_CALIBRATE",
                "parameters": [],
                "help": "If no STEPPER parameter is provided then this command will reports statistics on endstop stepper phases during past homing operations. When a STEPPER parameter is provided it arranges for the given endstop phase setting to be written to the config file (in conjunction with the SAVE_CONFIG command)."
            }
        ],
        "exclude_object": [
            {
                "command": "EXCLUDE_OBJECT",
                "parameters": [],
                "help": "When the NAME parameter is given, the named object will be excluded from printing.\n\nWhen the CURRENT parameter is given, the current object will be excluded from printing.\n\nWhen the RESET parameter is given, the list of excluded objects will be cleared. Additionally including NAME will only reset the named object. This can cause print failures, if layers were already skipped."
            },
            {
                "command": "EXCLUDE_OBJECT_DEFINE",
                "parameters": [],
                "help": "With no parameters provided, this will list the defined objects known to Klipper. Returns a list of strings, unless the JSON parameter is given, when it will return object details in json format.\n\nWhen the NAME parameter is included, this defines an object to be excluded.\n\nNAME: This parameter is required. It is the identifier used by other commands in this module.\nCENTER: An X,Y coordinate for the object.\nPOLYGON: An array of X,Y coordinates that provide an outline for the object.\n\nWhen the RESET parameter is provided, all defined objects will be cleared, and the [exclude_object] module will be reset."
            },
            {
                "command": "EXCLUDE_OBJECT_START",
                "parameters": [],
                "help": "This command takes a NAME parameter and denotes the start of the gcode for an object on the current layer."
            },
            {
                "command": "EXCLUDE_OBJECT_END",
                "parameters": [],
                "help": "Denotes the end of the object's gcode for the layer. It is paired with EXCLUDE_OBJECT_START. A NAME parameter is optional, and will only warn when the provided name does not match the current object."
            }
        ],
        "extruder": [
            {
                "command": "ACTIVATE_EXTRUDER",
                "parameters": [
                    "CHIP"
                ],
                "help": "In a printer with multiple extruder config sections, this command changes the active hotend."
            },
            {
                "command": "SET_PRESSURE_ADVANCE",
                "parameters": [
                    "ADVANCE",
                    "SMOOTH_TIME"
                ],
                "help": "Set pressure advance parameters of an extruder stepper (as defined in an extruder or extruder_stepper config section). If EXTRUDER is not specified, it defaults to the stepper defined in the active hotend."
            },
            {
                "command": "SET_EXTRUDER_ROTATION_DISTANCE",
                "parameters": [
                    "EXTRUDER",
                    "DISTANCE"
                ],
                "help": "Set a new value for the provided extruder stepper's \"rotation distance\" (as defined in an extruder or extruder_stepper config section). If the rotation distance is a negative number then the stepper motion will be inverted (relative to the stepper direction specified in the config file). Changed settings are not retained on Klipper reset. Use with caution as small changes can result in excessive pressure between extruder and hotend. Do proper calibration with filament before use. If 'DISTANCE' value is not provided then this command will return the current rotation distance."
            },
            {
                "command": "SYNC_EXTRUDER_MOTION",
                "parameters": [
                    "EXTRUDER",
                    "MOTION_QUEUE"
                ],
                "help": "This command will cause the stepper specified by EXTRUDER (as defined in an extruder or extruder_stepper config section) to become synchronized to the movement of an extruder specified by MOTION_QUEUE (as defined in an extruder config section). If MOTION_QUEUE is an empty string then the stepper will be desynchronized from all extruder movement."
            }
        ],
        "fan_generic": [
            {
                "command": "SET_FAN_SPEED",
                "parameters": [
                    "FAN",
                    "SPEED"
                ],
                "help": "This command sets the speed of a fan. \"speed\" must be between 0.0 and 1.0."
            }
        ],
        "firmware_retraction": [
            {
                "command": "SET_RETRACTION",
                "parameters": [],
                "help": "Adjust the parameters used by firmware retraction. RETRACT_LENGTH determines the length of filament to retract and unretract. The speed of retraction is adjusted via RETRACT_SPEED, and is typically set relatively high. The speed of unretraction is adjusted via UNRETRACT_SPEED, and is not particularly critical, although often lower than RETRACT_SPEED. In some cases it is useful to add a small amount of additional length on unretraction, and this is set via UNRETRACT_EXTRA_LENGTH. SET_RETRACTION is commonly set as part of slicer per-filament configuration, as different filaments require different parameter settings."
            },
            {
                "command": "GET_RETRACTION",
                "parameters": [],
                "help": "Queries the current parameters used by firmware retraction and displays them on the terminal."
            },
            "The following standard G-Code commands are available when the firmware_retraction config section is enabled. These commands allow you to utilize the firmware retraction feature available in many slicers, to reduce stringing during non-extrusion moves from one part of the print to another. Appropriately configuring pressure advance reduces the length of retraction required.\n\nG10: Retracts the extruder using the currently configured parameters.\nG11: Unretracts the extruder using the currently configured parameters."
        ],
        "force_move": [
            {
                "command": "FORCE_MOVE",
                "parameters": [
                    "STEPPER",
                    "DISTANCE",
                    "VELOCITY"
                ],
                "help": "This command will forcibly move the given stepper the given distance (in mm) at the given constant velocity (in mm/s). If ACCEL is specified and is greater than zero, then the given acceleration (in mm/s^2) will be used; otherwise no acceleration is performed. No boundary checks are performed; no kinematic updates are made; other parallel steppers on an axis will not be moved. Use caution as an incorrect command could cause damage! Using this command will almost certainly place the low-level kinematics in an incorrect state; issue a G28 afterwards to reset the kinematics. This command is intended for low-level diagnostics and debugging."
            },
            {
                "command": "SET_KINEMATIC_POSITION",
                "parameters": [],
                "help": "Force the low-level kinematic code to believe the toolhead is at the given cartesian position. This is a diagnostic and debugging command; use SET_GCODE_OFFSET and/or G92 for regular axis transformations. If an axis is not specified then it will default to the position that the head was last commanded to. Setting an incorrect or invalid position may lead to internal software errors. This command may invalidate future boundary checks; issue a G28 afterwards to reset the kinematics."
            },
            {
                "command": "STEPPER_BUZZ",
                "parameters": [],
                "help": "Move the given stepper forward one mm and then backward one mm, repeated 10 times. This is a diagnostic tool to help verify stepper connectivity."
            },
            "The force_move module is automatically loaded, however some commands require setting enable_force_move in the printer config."
        ],
        "gcode_macro": [
            {
                "command": "SET_GCODE_VARIABLE",
                "parameters": [
                    "MACRO",
                    "VARIABLE",
                    "VALUE"
                ],
                "help": "This command allows one to change the value of a gcode_macro variable at run-time. The provided VALUE is parsed as a Python literal."
            }
        ],
        "gcode_move": [
            {
                "command": "GET_POSITION",
                "parameters": [],
                "help": "Return information on the current location of the toolhead. See the developer documentation of GET_POSITION output for more information."
            },
            {
                "command": "SET_GCODE_OFFSET",
                "parameters": [],
                "help": "Set a positional offset to apply to future G-Code commands. This is commonly used to virtually change the Z bed offset or to set nozzle XY offsets when switching extruders. For example, if \"SET_GCODE_OFFSET Z=0.2\" is sent, then future G-Code moves will have 0.2mm added to their Z height. If the X_ADJUST style parameters are used, then the adjustment will be added to any existing offset (eg, \"SET_GCODE_OFFSET Z=-0.2\" followed by \"SET_GCODE_OFFSET Z_ADJUST=0.3\" would result in a total Z offset of 0.1). If \"MOVE=1\" is specified then a toolhead move will be issued to apply the given offset (otherwise the offset will take effect on the next absolute G-Code move that specifies the given axis). If \"MOVE_SPEED\" is specified then the toolhead move will be performed with the given speed (in mm/s); otherwise the toolhead move will use the last specified G-Code speed."
            },
            {
                "command": "SAVE_GCODE_STATE",
                "parameters": [],
                "help": "Save the current g-code coordinate parsing state. Saving and restoring the g-code state is useful in scripts and macros. This command saves the current g-code absolute coordinate mode (G90/G91), absolute extrude mode (M82/M83), origin (G92), offset (SET_GCODE_OFFSET), speed override (M220), extruder override (M221), move speed, current XYZ position, and relative extruder \"E\" position. If NAME is provided it allows one to name the saved state to the given string. If NAME is not provided it defaults to \"default\"."
            },
            {
                "command": "RESTORE_GCODE_STATE",
                "parameters": [
                    "NAME"
                ],
                "help": "Restore a state previously saved via SAVE_GCODE_STATE. If \"MOVE=1\" is specified then a toolhead move will be issued to move back to the previous XYZ position. If \"MOVE_SPEED\" is specified then the toolhead move will be performed with the given speed (in mm/s); otherwise the toolhead move will use the restored g-code speed."
            }
        ],
        "hall_filament_width_sensor": [
            {
                "command": "QUERY_FILAMENT_WIDTH",
                "parameters": [],
                "help": "Return the current measured filament width."
            },
            {
                "command": "RESET_FILAMENT_WIDTH_SENSOR",
                "parameters": [],
                "help": "Clear all sensor readings. Helpful after filament change."
            },
            {
                "command": "DISABLE_FILAMENT_WIDTH_SENSOR",
                "parameters": [],
                "help": "Turn off the filament width sensor and stop using it for flow control."
            },
            {
                "command": "ENABLE_FILAMENT_WIDTH_SENSOR",
                "parameters": [],
                "help": "Turn on the filament width sensor and start using it for flow control."
            },
            {
                "command": "QUERY_RAW_FILAMENT_WIDTH",
                "parameters": [],
                "help": "Return the current ADC channel readings and RAW sensor value for calibration points."
            },
            {
                "command": "ENABLE_FILAMENT_WIDTH_LOG",
                "parameters": [],
                "help": "Turn on diameter logging."
            },
            {
                "command": "DISABLE_FILAMENT_WIDTH_LOG",
                "parameters": [],
                "help": "Turn off diameter logging."
            },
            "The following commands are available when the tsl1401cl filament width sensor config section or hall filament width sensor config section is enabled (also see TSLl401CL Filament Width Sensor and Hall Filament Width Sensor)"
        ],
        "heaters": [
            {
                "command": "TURN_OFF_HEATERS",
                "parameters": [],
                "help": "Turn off all heaters."
            },
            {
                "command": "TEMPERATURE_WAIT",
                "parameters": [
                    "SENSOR"
                ],
                "help": "Wait until the given temperature sensor is at or above the supplied MINIMUM and/or at or below the supplied MAXIMUM."
            },
            {
                "command": "SET_HEATER_TEMPERATURE",
                "parameters": [
                    "HEATER"
                ],
                "help": "Sets the target temperature for a heater. If a target temperature is not supplied, the target is 0."
            }
        ],
        "idle_timeout": [
            {
                "command": "SET_IDLE_TIMEOUT",
                "parameters": [
                    "TIMEOUT"
                ],
                "help": "Allows the user to set the idle timeout (in seconds)."
            },
            "The idle_timeout module is automatically loaded."
        ],
        "input_shaper": [
            {
                "command": "SET_INPUT_SHAPER",
                "parameters": [],
                "help": "Modify input shaper parameters. Note that SHAPER_TYPE parameter resets input shaper for both X and Y axes even if different shaper types have been configured in [input_shaper] section. SHAPER_TYPE cannot be used together with either of SHAPER_TYPE_X and SHAPER_TYPE_Y parameters. See config reference for more details on each of these parameters."
            },
            "The following command is enabled if an input_shaper config section has been enabled (also see the resonance compensation guide)"
        ],
        "manual_probe": [
            {
                "command": "MANUAL_PROBE",
                "parameters": [],
                "help": "Run a helper script useful for measuring the height of the nozzle at a given location. If SPEED is specified, it sets the speed of TESTZ commands (the default is 5mm/s). During a manual probe, the following additional commands are available:\n\nACCEPT: This command accepts the current Z position and concludes the manual probing tool.\nABORT: This command terminates the manual probing tool.\nTESTZ Z=<value>: This command moves the nozzle up or down by the amount specified in \"value\". For example, TESTZ Z=-.1 would move the nozzle down .1mm while TESTZ Z=.1 would move the nozzle up .1mm. The value may also be +, -, ++, or -- to move the nozzle up or down an amount relative to previous attempts."
            },
            {
                "command": "Z_ENDSTOP_CALIBRATE",
                "parameters": [],
                "help": "Run a helper script useful for calibrating a Z position_endstop config setting. See the MANUAL_PROBE command for details on the parameters and the additional commands available while the tool is active."
            },
            {
                "command": "Z_OFFSET_APPLY_ENDSTOP",
                "parameters": [],
                "help": "Take the current Z Gcode offset (aka, babystepping), and subtract it from the stepper_z endstop_position. This acts to take a frequently used babystepping value, and \"make it permanent\". Requires a SAVE_CONFIG to take effect."
            }
        ],
        "manual_stepper": [
            {
                "command": "MANUAL_STEPPER",
                "parameters": [
                    "STEPPER"
                ],
                "help": "This command will alter the state of the stepper. Use the ENABLE parameter to enable/disable the stepper. Use the SET_POSITION parameter to force the stepper to think it is at the given position. Use the MOVE parameter to request a movement to the given position. If SPEED and/or ACCEL is specified then the given values will be used instead of the defaults specified in the config file. If an ACCEL of zero is specified then no acceleration will be performed. If STOP_ON_ENDSTOP=1 is specified then the move will end early should the endstop report as triggered (use STOP_ON_ENDSTOP=2 to complete the move without error even if the endstop does not trigger, use -1 or -2 to stop when the endstop reports not triggered). Normally future G-Code commands will be scheduled to run after the stepper move completes, however if a manual stepper move uses SYNC=0 then future G-Code movement commands may run in parallel with the stepper movement."
            }
        ],
        "mcp4018": [
            {
                "command": "SET_DIGIPOT",
                "parameters": [
                    "DIGIPOT",
                    "WIPER"
                ],
                "help": "This command will change the current value of the digipot. This value should typically be between 0.0 and 1.0, unless a 'scale' is defined in the config. When 'scale' is defined, then this value should be between 0.0 and 'scale'."
            }
        ],
        "led": [
            {
                "command": "SET_LED",
                "parameters": [
                    "LED",
                    "RED",
                    "GREEN",
                    "BLUE",
                    "WHITE"
                ],
                "help": "This sets the LED output. Each color <value> must be between 0.0 and 1.0. The WHITE option is only valid on RGBW LEDs. If the LED supports multiple chips in a daisy-chain then one may specify INDEX to alter the color of just the given chip (1 for the first chip, 2 for the second, etc.). If INDEX is not provided then all LEDs in the daisy-chain will be set to the provided color. If TRANSMIT=0 is specified then the color change will only be made on the next SET_LED command that does not specify TRANSMIT=0; this may be useful in combination with the INDEX parameter to batch multiple updates in a daisy-chain. By default, the SET_LED command will sync it's changes with other ongoing gcode commands. This can lead to undesirable behavior if LEDs are being set while the printer is not printing as it will reset the idle timeout. If careful timing is not needed, the optional SYNC=0 parameter can be specified to apply the changes without resetting the idle timeout."
            },
            {
                "command": "",
                "parameters": [
                    "LED",
                    "TEMPLATE"
                ],
                "help": "Assign a display_template to a given LED. For example, if one defined a [display_template my_led_template] config section then one could assign TEMPLATE=my_led_template here. The display_template should produce a comma separated string containing four floating point numbers corresponding to red, green, blue, and white color settings. The template will be continuously evaluated and the LED will be automatically set to the resulting colors. One may set display_template parameters to use during template evaluation (parameters will be parsed as Python literals). If INDEX is not specified then all chips in the LED's daisy-chain will be set to the template, otherwise only the chip with the given index will be updated. If TEMPLATE is an empty string then this command will clear any previous template assigned to the LED (one can then use SET_LED commands to manage the LED's color settings)."
            }
        ],
        "output_pin": [
            {
                "command": "SET_PIN",
                "parameters": [
                    "PIN",
                    "VALUE"
                ],
                "help": "Set the pin to the given output VALUE. VALUE should be 0 or 1 for \"digital\" output pins. For PWM pins, set to a value between 0.0 and 1.0, or between 0.0 and scale if a scale is configured in the output_pin config section."
            },
            "The following command is available when an output_pin config section or pwm_tool config section is enabled."
        ],
        "palette2": [
            "The following commands are available when the palette2 config section is enabled.\n\nPalette prints work by embedding special OCodes (Omega Codes) in the GCode file:\n\nO1...O32: These codes are read from the GCode stream and processed by this module and passed to the Palette 2 device.",
            {
                "command": "PALETTE_CONNECT",
                "parameters": [],
                "help": "This command initializes the connection with the Palette 2."
            },
            {
                "command": "PALETTE_DISCONNECT",
                "parameters": [],
                "help": "This command disconnects from the Palette 2."
            },
            {
                "command": "PALETTE_CLEAR",
                "parameters": [],
                "help": "This command instructs the Palette 2 to clear all of the input and output paths of filament."
            },
            {
                "command": "PALETTE_CUT",
                "parameters": [],
                "help": "This command instructs the Palette 2 to cut the filament currently loaded in the splice core."
            },
            {
                "command": "PALETTE_SMART_LOAD",
                "parameters": [],
                "help": "This command start the smart load sequence on the Palette 2. Filament is loaded automatically by extruding it the distance calibrated on the device for the printer, and instructs the Palette 2 once the loading has been completed. This command is the same as pressing Smart Load directly on the Palette 2 screen after the filament load is complete."
            }
        ],
        "pid_calibrate": [
            "The pid_calibrate module is automatically loaded if a heater is defined in the config file.",
            {
                "command": "PID_CALIBRATE",
                "parameters": [
                    "HEATER",
                    "TARGET"
                ],
                "help": "Perform a PID calibration test. The specified heater will be enabled until the specified target temperature is reached, and then the heater will be turned off and on for several cycles. If the WRITE_FILE parameter is enabled, then the file /tmp/heattest.txt will be created with a log of all temperature samples taken during the test."
            }
        ],
        "pause_resume": [
            {
                "command": "PAUSE",
                "parameters": [],
                "help": "Pauses the current print. The current position is captured for restoration upon resume."
            },
            {
                "command": "RESUME",
                "parameters": [
                    "CHIP",
                    "REG"
                ],
                "help": "Resumes the print from a pause, first restoring the previously captured position. The VELOCITY parameter determines the speed at which the tool should return to the original captured position."
            },
            {
                "command": "CLEAR_PAUSE",
                "parameters": [],
                "help": "Clears the current paused state without resuming the print. This is useful if one decides to cancel a print after a PAUSE. It is recommended to add this to your start gcode to make sure the paused state is fresh for each print."
            },
            {
                "command": "CANCEL_PRINT",
                "parameters": [],
                "help": "Cancels the current print."
            }
        ],
        "probe": [
            {
                "command": "PROBE",
                "parameters": [],
                "help": "Move the nozzle downwards until the probe triggers. If any of the optional parameters are provided they override their equivalent setting in the probe config section."
            },
            {
                "command": "QUERY_PROBE",
                "parameters": [],
                "help": "Report the current status of the probe (\"triggered\" or \"open\")."
            },
            {
                "command": "PROBE_ACCURACY",
                "parameters": [],
                "help": "Calculate the maximum, minimum, average, median, and standard deviation of multiple probe samples. By default, 10 SAMPLES are taken. Otherwise the optional parameters default to their equivalent setting in the probe config section."
            },
            {
                "command": "PROBE_CALIBRATE",
                "parameters": [],
                "help": "Run a helper script useful for calibrating the probe's z_offset. See the PROBE command for details on the optional probe parameters. See the MANUAL_PROBE command for details on the SPEED parameter and the additional commands available while the tool is active. Please note, the PROBE_CALIBRATE command uses the speed variable to move in XY direction as well as Z."
            },
            {
                "command": "Z_OFFSET_APPLY_PROBE",
                "parameters": [],
                "help": "Take the current Z Gcode offset (aka, babystepping), and subtract if from the probe's z_offset. This acts to take a frequently used babystepping value, and \"make it permanent\". Requires a SAVE_CONFIG to take effect."
            }
        ],
        "probe_eddy_current": [
            {
                "command": "PROBE_EDDY_CURRENT_CALIBRATE",
                "parameters": [
                    "CHIP"
                ],
                "help": "This starts a tool that calibrates the sensor resonance frequencies to corresponding Z heights. The tool will take a couple of minutes to complete. After completion, use the SAVE_CONFIG command to store the results in the printer.cfg file."
            },
            {
                "command": "LDC_CALIBRATE_DRIVE_CURRENT",
                "parameters": [
                    "CHIP"
                ],
                "help": "This tool will calibrate the ldc1612 DRIVE_CURRENT0 register. Prior to using this tool, move the sensor so that it is near the center of the bed and about 20mm above the bed surface. Run this command to determine an appropriate DRIVE_CURRENT for the sensor. After running this command use the SAVE_CONFIG command to store that new setting in the printer.cfg config file."
            }
        ],
        "pwm_cycle_time": [
            {
                "command": "SET_PIN",
                "parameters": [
                    "PIN",
                    "CYCLE_TIME"
                ],
                "help": "This command works similarly to output_pin SET_PIN commands. The command here supports setting an explicit cycle time using the CYCLE_TIME parameter (specified in seconds). Note that the CYCLE_TIME parameter is not stored between SET_PIN commands (any SET_PIN command without an explicit CYCLE_TIME parameter will use the cycle_time specified in the pwm_cycle_time config section)."
            }
        ],
        "query_adc": [
            {
                "command": "QUERY_ADC",
                "parameters": [],
                "help": "Report the last analog value received for a configured analog pin. If NAME is not provided, the list of available adc names are reported. If PULLUP is provided (as a value in Ohms), the raw analog value along with the equivalent resistance given that pullup is reported."
            }
        ],
        "query_endstops": [
            {
                "command": "QUERY_ENDSTOPS",
                "parameters": [],
                "help": "Probe the axis endstops and report if they are \"triggered\" or in an \"open\" state. This command is typically used to verify that an endstop is working correctly."
            }
        ],
        "resonance_tester": [
            {
                "command": "MEASURE_AXES_NOISE",
                "parameters": [],
                "help": "Measures and outputs the noise for all axes of all enabled accelerometer chips."
            },
            {
                "command": "TEST_RESONANCES",
                "parameters": [
                    "AXIS",
                    "OUTPUT"
                ],
                "help": "Runs the resonance test in all configured probe points for the requested \"axis\" and measures the acceleration using the accelerometer chips configured for the respective axis. \"axis\" can either be X or Y, or specify an arbitrary direction as AXIS=dx,dy, where dx and dy are floating point numbers defining a direction vector (e.g. AXIS=X, AXIS=Y, or AXIS=1,-1 to define a diagonal direction). Note that AXIS=dx,dy and AXIS=-dx,-dy is equivalent. adxl345_chip_name can be one or more configured adxl345 chip,delimited with comma, for example CHIPS=\"adxl345, adxl345 rpi\". Note that adxl345 can be omitted from named adxl345 chips. If POINT is specified it will override the point(s) configured in [resonance_tester]. If INPUT_SHAPING=0 or not set(default), disables input shaping for the resonance testing, because it is not valid to run the resonance testing with the input shaper enabled. OUTPUT parameter is a comma-separated list of which outputs will be written. If raw_data is requested, then the raw accelerometer data is written into a file or a series of files /tmp/raw_data_<axis>m_[<chip_name>m_][<point>m_]<name>.csv with (<point>m_ part of the name generated only if more than 1 probe point is configured or POINT is specified). If resonances is specified, the frequency response is calculated (across all probe points) and written into /tmp/resonances_<axis>m_<name>.csv file. If unset, OUTPUT defaults to resonances, and NAME defaults to the current time in \"YYYYMMDD_HHMMSS\" format."
            },
            {
                "command": "SHAPER_CALIBRATE",
                "parameters": [],
                "help": "Similarly to TEST_RESONANCES, runs the resonance test as configured, and tries to find the optimal parameters for the input shaper for the requested axis (or both X and Y axes if AXIS parameter is unset). If MAX_SMOOTHING is unset, its value is taken from [resonance_tester] section, with the default being unset. See the Max smoothing of the measuring resonances guide for more information on the use of this feature. The results of the tuning are printed to the console, and the frequency responses and the different input shapers values are written to a CSV file(s) /tmp/calibration_data_<axis>m_<name>.csv. Unless specified, NAME defaults to the current time in \"YYYYMMDD_HHMMSS\" format. Note that the suggested input shaper parameters can be persisted in the config by issuing SAVE_CONFIG command, and if [input_shaper] was already enabled previously, these parameters take effect immediately."
            }
        ],
        "save_variables": [
            {
                "command": "SAVE_VARIABLE",
                "parameters": [
                    "VARIABLE",
                    "VALUE"
                ],
                "help": "Saves the variable to disk so that it can be used across restarts. All stored variables are loaded into the printer.save_variables.variables dict at startup and can be used in gcode macros. The provided VALUE is parsed as a Python literal."
            },
            "The following command is enabled if a save_variables config section has been enabled."
        ],
        "screws_tilt_adjust": [
            {
                "command": "SCREWS_TILT_CALCULATE",
                "parameters": [],
                "help": "This command will invoke the bed screws adjustment tool. It will command the nozzle to different locations (as defined in the config file) probing the z height and calculate the number of knob turns to adjust the bed level. If DIRECTION is specified, the knob turns will all be in the same direction, clockwise (CW) or counterclockwise (CCW). See the PROBE command for details on the optional probe parameters. IMPORTANT: You MUST always do a G28 before using this command. If MAX_DEVIATION is specified, the command will raise a gcode error if any difference in the screw height relative to the base screw height is greater than the value provided. The optional HORIZONTAL_MOVE_Z value overrides the horizontal_move_z option specified in the config file."
            },
            "The following commands are available when the screws_tilt_adjust config section is enabled (also see the manual level guide)."
        ],
        "sdcard_loop": [
            {
                "command": "SDCARD_LOOP_BEGIN",
                "parameters": [
                    "COUNT"
                ],
                "help": "Begin a looped section in the SD print. A count of 0 indicates that the section should be looped indefinitely"
            },
            {
                "command": "SDCARD_LOOP_END",
                "parameters": [],
                "help": "End a looped section in the SD print."
            },
            {
                "command": "SDCARD_LOOP_DESIST",
                "parameters": [],
                "help": "Complete existing loops without further iterations."
            },
            "When the sdcard_loop config section is enabled, the following extended commands are available."
        ],
        "servo": [
            {
                "command": "SET_SERVO",
                "parameters": [
                    "SERVO",
                    "ANGLE | WIDTH"
                ],
                "help": "Set the servo position to the given angle (in degrees) or pulse width (in seconds). Use WIDTH=0 to disable the servo output."
            },
            "The following commands are available when a servo config section is enabled."
        ],
        "skew_correction": [
            "The following commands are available when the skew_correction config section is enabled (also see the Skew Correction guide).",
            {
                "command": "SET_SKEW",
                "parameters": [],
                "help": "Configures the [skew_correction] module with measurements (in mm) taken from a calibration print. One may enter measurements for any combination of planes, planes not entered will retain their current value. If CLEAR=1 is entered then all skew correction will be disabled."
            },
            {
                "command": "GET_CURRENT_SKEW",
                "parameters": [],
                "help": "Reports the current printer skew for each plane in both radians and degrees. The skew is calculated based on parameters provided via the SET_SKEW gcode."
            },
            {
                "command": "CALC_MEASURED_SKEW",
                "parameters": [],
                "help": "Calculates and reports the skew (in radians and degrees) based on a measured print. This can be useful for determining the printer's current skew after correction has been applied. It may also be useful before correction is applied to determine if skew correction is necessary. See Skew Correction for details on skew calibration objects and measurements."
            },
            {
                "command": "SKEW_PROFILE",
                "parameters": [],
                "help": "Profile management for skew_correction. LOAD will restore skew state from the profile matching the supplied name. SAVE will save the current skew state to a profile matching the supplied name. Remove will delete the profile matching the supplied name from persistent memory. Note that after SAVE or REMOVE operations have been run the SAVE_CONFIG gcode must be run to make the changes to persistent memory permanent."
            }
        ],
        "smart_effector": [
            {
                "command": "SET_SMART_EFFECTOR",
                "parameters": [],
                "help": "Set the Smart Effector parameters. When SENSITIVITY is specified, the respective value is written to the SmartEffector EEPROM (requires control_pin to be provided). Acceptable <sensitivity> values are 0..255, the default is 50. Lower values require less nozzle contact force to trigger (but there is a higher risk of false triggering due to vibrations during probing), and higher values reduce false triggering (but require larger contact force to trigger). Since the sensitivity is written to EEPROM, it is preserved after the shutdown, and so it does not need to be configured on every printer startup. ACCEL and RECOVERY_TIME allow to override the corresponding parameters at run-time, see the config section of Smart Effector for more info on those parameters."
            },
            {
                "command": "RESET_SMART_EFFECTOR",
                "parameters": [],
                "help": "Resets Smart Effector sensitivity to its factory settings. Requires control_pin to be provided in the config section."
            }
        ],
        "stepper_enable": [
            "The stepper_enable module is automatically loaded.",
            {
                "command": "SET_STEPPER_ENABLE",
                "parameters": [
                    "STEPPER",
                    "ENABLE"
                ],
                "help": "Enable or disable only the given stepper. This is a diagnostic and debugging tool and must be used with care. Disabling an axis motor does not reset the homing information. Manually moving a disabled stepper may cause the machine to operate the motor outside of safe limits. This can lead to damage to axis components, hot ends, and print surface."
            }
        ],
        "temperature_fan": [
            "The following command is available when a temperature_fan config section is enabled.",
            {
                "command": "SET_TEMPERATURE_FAN_TARGET",
                "parameters": [
                    "temperature_fan"
                ],
                "help": "Sets the target temperature for a temperature_fan. If a target is not supplied, it is set to the specified temperature in the config file. If speeds are not supplied, no change is applied."
            }
        ],
        "tmcXXXX": [
            "The following commands are available when any of the tmcXXXX config sections are enabled.",
            {
                "command": "DUMP_TMC",
                "parameters": [],
                "help": "This command will read all TMC driver registers and report their values. If a REGISTER is provided, only the specified register will be dumped."
            },
            {
                "command": "INIT_TMC",
                "parameters": [
                    "STEPPER"
                ],
                "help": "This command will initialize the TMC registers. Needed to re-enable the driver if power to the chip is turned off then back on."
            },
            {
                "command": "SET_TMC_CURRENT",
                "parameters": [
                    "STEPPER",
                    "CURRENT",
                    "HOLDCURRENT"
                ],
                "help": "This will adjust the run and hold currents of the TMC driver. HOLDCURRENT is not applicable to tmc2660 drivers. When used on a driver which has the globalscaler field (tmc5160 and tmc2240), if StealthChop2 is used, the stepper must be held at standstill for >130ms so that the driver executes the AT#1 calibration."
            },
            {
                "command": "SET_TMC_FIELD",
                "parameters": [
                    "STEPPER",
                    "FIELD",
                    "VALUE",
                    "VELOCITY"
                ],
                "help": "This will alter the value of the specified register field of the TMC driver. This command is intended for low-level diagnostics and debugging only because changing the fields during run-time can lead to undesired and potentially dangerous behavior of your printer. Permanent changes should be made using the printer configuration file instead. No sanity checks are performed for the given values. A VELOCITY can also be specified instead of a VALUE. This velocity is converted to the 20bit TSTEP based value representation. Only use the VELOCITY argument for fields that represent velocities."
            }
        ],
        "toolhead": [
            {
                "command": "SET_VELOCITY_LIMIT",
                "parameters": [],
                "help": "This command can alter the velocity limits that were specified in the printer config file. See the printer config section for a description of each parameter."
            }
        ],
        "tuning_tower": [
            {
                "command": "TUNING_TOWER",
                "parameters": [
                    "COMMAND",
                    "PARAMETER",
                    "START"
                ],
                "help": "A tool for tuning a parameter on each Z height during a print. The tool will run the given COMMAND with the given PARAMETER assigned to a value that varies with Z according to a formula. Use FACTOR if you will use a ruler or calipers to measure the Z height of the optimum value, or STEP_DELTA and STEP_HEIGHT if the tuning tower model has bands of discrete values as is common with temperature towers. If SKIP=<value> is specified, the tuning process doesn't begin until Z height <value> is reached, and below that the value will be set to START; in this case, the z_height used in the formulas below is actually max(z - skip, 0). There are three possible combinations of options:\n\nFACTOR: The value changes at a rate of factor per millimeter. The formula used is: value = start + factor * z_height. You can plug the optimum Z height directly into the formula to determine the optimum parameter value.\nFACTOR and BAND: The value changes at an average rate of factor per millimeter, but in discrete bands where the adjustment will only be made every BAND millimeters of Z height. The formula used is: value = start + factor * ((floor(z_height / band) + .5) * band).\nSTEP_DELTA and STEP_HEIGHT: The value changes by STEP_DELTA every STEP_HEIGHT millimeters. The formula used is: value = start + step_delta * floor(z_height / step_height). You can simply count bands or read tuning tower labels to determine the optimum value."
            }
        ],
        "virtual_sdcard": [
            {
                "command": "SDCARD_PRINT_FILE",
                "parameters": [
                    "FILENAME"
                ],
                "help": "Load a file and start SD print"
            },
            {
                "command": "SDCARD_RESET_FILE",
                "parameters": [],
                "help": "Unload file and clear SD state."
            }
        ],
        "z_thermal_adjust": [
            {
                "command": "SET_Z_THERMAL_ADJUST",
                "parameters": [],
                "help": "Enable or disable the Z thermal adjustment with ENABLE. Disabling does not remove any adjustment already applied, but will freeze the current adjustment value - this prevents potentially unsafe downward Z movement. Re-enabling can potentially cause upward tool movement as the adjustment is updated and applied. TEMP_COEFF allows run-time tuning of the adjustment temperature coefficient (i.e. the TEMP_COEFF config parameter). TEMP_COEFF values are not saved to the config. REF_TEMP manually overrides the reference temperature typically set during homing (for use in e.g. non-standard homing routines) - will be reset automatically upon homing."
            }
        ],
        "z_tilt": [
            {
                "command": "Z_TILT_ADJUST",
                "parameters": [],
                "help": "This command will probe the points specified in the config and then make independent adjustments to each Z stepper to compensate for tilt. See the PROBE command for details on the optional probe parameters. The optional HORIZONTAL_MOVE_Z value overrides the horizontal_move_z option specified in the config file."
            }
        ],
        "section": [
            {
                "command": "",
                "parameters": [
                    "CHIP",
                    "REG"
                ],
                "help": ""
            }
        ]
    }
}
